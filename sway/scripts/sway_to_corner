#! /usr/bin/env fish

# Set defaults
set -l gaps   15
set -l dims   300 450
set -l marks  '"F1"' '"F2"' '"F3"' '"F4"'
set -l corner $marks[1]
set -l center 67

if test (count $argv) -ne 1
  echo One positional argument required
  return
end

# Get the focused output marks
set -l output_marks \
(
  swaymsg -t get_tree -r | jq '.. | select(.focused?).marks.[]'
)

# Check for active mark within mark set
for mark in $output_marks
  if set pos_idx (contains -i $mark $marks)
    set dims                 \
    (
      swaymsg -t get_tree -r \
        | jq '.. | select(.focused?).rect | .width, .height'
    )

    break
  end
end

# Get the container type
set con_type \
(
  swaymsg -t get_tree -r | jq '.. | select(.focused?).type'
)

# Check for zero command
if test "$argv[1]" -eq 0
  if test (count $pos_idx) -gt 0
    swaymsg --  mark    --toggle $marks[$pos_idx]  ,\
                move    position center            ,\
                resize  set width $center ppt height $center ppt
    return
  end

  if test "$con_type" = '"floating_con"'
    swaymsg floating disable, sticky disable
  else
    swaymsg floating  enable          ,\
            move      position center ,\
            resize    set width $center ppt height $center ppt
  end
  return
end

# Limit non-reset actions to floating containers
if test "$con_type" != '"floating_con"'
  echo Action limited to floating containers
  return
end

# Rotate position, if previously set
if test (count $pos_idx) -gt 0
  set -l len (count $marks)
  if test "$argv[1]" -gt 0
    set corner $marks[(math $pos_idx % $len + 1)]
  else if test "$argv[1]" -lt 0
    set corner $marks[(math \($pos_idx + $len - 2\) % $len + 1)]
  end
end

# Get the focused output properties
set -l output_props         \
(
  swaymsg -t get_outputs -r \
    | jq                    \
      '..
        | select(.focused?).rect
        | .x, .y, .width, .height'
)

# Calculate output region area in absolute coordinates
# [x_min, y_min, x_max, y_max]
set -l output_region                          \
  $output_props[1]                            \
  $output_props[2]                            \
  (math $output_props[1] + $output_props[3])  \
  (math $output_props[2] + $output_props[4])

# Get the focused output bar properties
set -l bar_props                    \
(
  swaymsg -t get_outputs -r         \
    | jq                            \
      '..
        | select(.focused?).layer_shell_surfaces.[]
        | select(.namespace=="waybar").extent
        | .x, .y, .width, .height'  \
    2> /dev/null
)

# Calculate bar keepout area in absolute coordinates
# [x_min, y_min, x_max, y_max]
set -l bar_region                                         \
  (math $bar_props[1] + $output_props[1])                 \
  (math $bar_props[2] + $output_props[2])                 \
  (math $bar_props[1] + $bar_props[3] + $output_props[1]) \
  (math $bar_props[2] + $bar_props[4] + $output_props[2])

# Set output center point
set -l center_x (math $output_props[3] / 2 + $output_props[1])
set -l center_y (math $output_props[4] / 2 + $output_props[2])

# Sort horizontal and vertical properties with center point
set -l hori                                                     \
  (
    string join0 $output_region[1 3] $bar_region[1 3] $center_x \
      | sort -zn                                                \
      | string split0
  )

set -l vert                                                     \
  (
    string join0 $output_region[2 4] $bar_region[2 4] $center_y \
      | sort -zn                                                \
      | string split0
  )

# Get the index of the center point
set -l x_idx (contains -i $center_x $hori)
set -l y_idx (contains -i $center_y $vert)

# Calculate limit indices within the hori and vert arrays
set -l diff (math min $x_idx - 1, (count $hori) - $x_idx)
set -l bound[1 3]               \
  $hori[(math $x_idx - $diff)]  \
  $hori[(math $x_idx + $diff)]

set -l diff (math min $y_idx - 1, (count $vert) - $y_idx)
set -l bound[2 4]               \
  $vert[(math $y_idx - $diff)]  \
  $vert[(math $y_idx + $diff)]

# Set the anchor coordinate
switch $corner
  case $marks[1] # Top Left
    set coord                             \
      (math $bound[1] + $gaps)            \
      (math $bound[2] + $gaps)
  case $marks[2] # Top Right
    set coord                             \
      (math $bound[3] - $dims[1] - $gaps) \
      (math $bound[2] + $gaps)
  case $marks[3] # Bottom Right
    set coord                             \
      (math $bound[3] - $dims[1] - $gaps) \
      (math $bound[4] - $dims[2] - $gaps)
  case $marks[4] # Bottom Left
    set coord                             \
      (math $bound[1] + $gaps)            \
      (math $bound[4] - $dims[2] - $gaps)
  case *
    return
end

# Move container
swaymsg resize    set width $dims[1] px height $dims[2] px  ,\
        move      absolute position $coord[1] $coord[2]     ,\
        sticky    enable                                    ,\
        mark      $corner